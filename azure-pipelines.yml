# Trigger pipeline on these branches
trigger:
  - main
  - master
  - develop

# Use Ubuntu for build agent
pool:
  vmImage: "ubuntu-latest"

# Global variables
variables:
  solution: "**/*.sln"
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"
  dotnetVersion: "8.0.x"
  projectName: "DÃ©duplication Web Application"

stages:
  # Build Stage
  - stage: Build
    displayName: "Build and Test"
    jobs:
      - job: Build
        steps:
          # Install .NET SDK
          - task: UseDotNet@2
            displayName: "Install .NET SDK"
            inputs:
              version: $(dotnetVersion)
              includePreviewVersions: false

          # Restore NuGet packages
          - task: DotNetCoreCLI@2
            displayName: "Restore NuGet packages"
            inputs:
              command: "restore"
              projects: "$(solution)"
              feedsToUse: "select"
              vstsFeed: "default"

          # Build the solution
          - task: DotNetCoreCLI@2
            displayName: "Build Solution"
            inputs:
              command: "build"
              projects: "$(solution)"
              arguments: "--configuration $(buildConfiguration) --no-restore"

          # Run tests
          - task: DotNetCoreCLI@2
            displayName: "Run Tests"
            inputs:
              command: "test"
              projects: "**/*[Tt]ests/*.csproj"
              arguments: "--configuration $(buildConfiguration) --no-build"
              publishTestResults: true

          # Publish application
          - task: DotNetCoreCLI@2
            displayName: "Publish Application"
            inputs:
              command: "publish"
              publishWebProjects: true
              arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)"
              zipAfterPublish: true

          # Publish build artifacts
          - task: PublishBuildArtifacts@1
            displayName: "Publish Build Artifacts"
            inputs:
              pathToPublish: "$(Build.ArtifactStagingDirectory)"
              artifactName: "drop"

  # Development Deployment Stage
  - stage: DeployToDev
    displayName: "Deploy to Development"
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: Deploy
        environment: development
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION_NAME)"
                    appName: "$(WebAppName)-dev"
                    package: "$(Pipeline.Workspace)/drop/**/*.zip"

  # Production Deployment Stage
  - stage: DeployToProd
    displayName: "Deploy to Production"
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - deployment: Deploy
        environment: production
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: "$(AZURE_SERVICE_CONNECTION_NAME)"
                    appName: "$(WebAppName)-prod"
                    package: "$(Pipeline.Workspace)/drop/**/*.zip"
